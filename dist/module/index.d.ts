import { Message, Messages, IClientConfig, IClientAuthenticationConfig, Opcode, Data, Type, ConnectionOptions, DisconnectionOptions } from './defs';
export default class MesaClient {
    url: string;
    authenticated: boolean;
    messages: Messages;
    private config;
    private ws;
    private queue;
    private rules;
    private heartbeatIntervalTime;
    private authenticationTimeout;
    private reconnectionIntervalId;
    private reconnectionIntervalTime;
    private authenticationResolve;
    onConnected: (options: ConnectionOptions) => void;
    onMessage: (message: Message) => void;
    onDisconnected: (code: number, reason: string, options: DisconnectionOptions) => void;
    onError: (error: Error) => void;
    private isInitialConnection;
    private isInitialSessionConnection;
    private isAutomaticReconnection;
    private didForcefullyDisconnect;
    constructor(url: string, config?: IClientConfig);
    connect(): Promise<unknown>;
    send(opcode: Opcode, data: Data, type?: Type): void;
    private sendRaw;
    authenticate: (data: object, config?: IClientAuthenticationConfig) => Promise<unknown>;
    disconnect(code?: number, data?: string): void;
    private parseConfig;
    private parseAuthenticationConfig;
    private connectAndSupressWarnings;
    private registerOpen;
    private registerMessage;
    private registerClose;
    private registerError;
}
